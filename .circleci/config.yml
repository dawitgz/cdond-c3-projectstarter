version: 2.1
   
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            # Your code here
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Your Memstash or kvdb.io GET URL code goes here
            SUCCESS=$(curl --insecure  https://kvdb.io/LZSPTqPpsY7LoAJG8JA73d/migration_${CIRCLE_WORKFLOW_ID:0:7})
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: 
            - frontend/node_modules
          key: frontend-build
      - save_cache:
          paths: 
            - frontend/dist
          key: frontend-dist

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      # Your job code here
      - run: 
          name: Front end test runner
          command: |
            cd frontend
            npm install 
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Backend test runner
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Ran a critical-only security audit on the frontend app
          command: |
            cd frontend
            npm install 
            npm audit fix --audit-level=critical 

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Ran a critical-only security audit on the backend app
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical 

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Project="udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo '[web]' > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure    
      - destroy-environment  

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["11:f7:81:0b:69:ed:27:19:27:f7:47:6d:f2:21:7f:5e"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Upgrade pip
          command: |
            python3 -m pip install --upgrade --user pip
      - run:
          name: Install Ansible  
          command: |
            apk add --no-cache aws-cli
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment  

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=${TYPEORM_CONNECTION} >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} >> "backend/.env"
            echo TYPEORM_ENTITIES=${TYPEORM_ENTITIES} >> "backend/.env"
            echo TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS} >> "backend/.env"
            echo TYPEORM_HOST=${TYPEORM_HOST} >> backend/.env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> backend/.env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> backend/.env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> backend/.env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> backend/.env
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvbd
          command: |
            cat ~/project/backend/migrations_dump.txt
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID in your local terminal first
              curl -k https://kvdb.io/LZSPTqPpsY7LoAJG8JA73d/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - run: cat ~/project/backend/migrations_dump.txt
      - run: 
          name: Look at error log file
          command: cat /home/circleci/.npm/_logs/2022-*-debug.log
          when: on_fail
      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - destroy-environment 
        
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip 
      - run:
          name: Get backend url to bake into frontend env variable
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
            cat frontend/.env
      - restore_cache:
          keys: [frontend-dist]
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz /home/circleci/project/frontend/dist
            aws s3 cp /home/circleci/project/frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
  
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["11:f7:81:0b:69:ed:27:19:27:f7:47:6d:f2:21:7f:5e"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip  
            apk add --update ansible  
            apk add --update nodejs npm
      - run:
          name: Deploy backend
          command: |
            # your code here
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=${TYPEORM_CONNECTION} >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} >> "backend/.env"
            echo TYPEORM_ENTITIES=${TYPEORM_ENTITIES} >> "backend/.env"
            echo TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS} >> "backend/.env"
            echo TYPEORM_HOST=${TYPEORM_HOST} >> backend/.env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> backend/.env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> backend/.env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> backend/.env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> backend/.env
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd ~/project/.circleci/ansible
            echo "Contents of the inventory.txt file is -----"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: alpine:latest
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add aws-cli
            apk add --update curl
      - attach_workspace:
          at: ~/        
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            #!/usr/bin/env bash
            sleep 0.1
            export BACKEND_IP=$(tail -1 ~/project/.circleci/ansible/inventory.txt)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
            # your code here
            if curl "${API_URL}" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo "${URL}"
            if curl -s "${URL}" | grep "Welcome"
            then
              # change this to 0 after the job fails
              return 0
            else
              return 1
            fi  
      # Here's where you will add some code to rollback on failure  
      #- destroy-environment
      #- revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "NewWorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

  cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              # your code here
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [master]