version: 2.1
   
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Revert migrations 
          when: on_fail
          command: |
            npm run migrations:revert
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: 
            - frontend/node_modules
          key: frontend-build
      - save_cache:
          paths: 
            - frontend/dist
          key: frontend-dist

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      # Your job code here
      - run: 
          name: Front end test runner
          command: |
            cd frontend
            npm install 
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Backend test runner
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Ran a critical-only security audit on the frontend app
          command: |
            cd frontend
            npm install 
            npm audit fix --audit-level=critical 

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Ran a critical-only security audit on the backend app
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical 

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Project="udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo '[web]' > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure    
      - destroy-environment  

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["11:f7:81:0b:69:ed:27:19:27:f7:47:6d:f2:21:7f:5e"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Upgrade pip
          command: |
            python3 -m pip install --upgrade --user pip
      - run:
          name: Install Ansible  
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment  

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm audit fix --audit-level=critical 
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvbd
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID "" in your local terminal first
              curl -k https://kvdb.io/LZSPTqPpsY7LoAJG8JA73d/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - run: cat ~/project/backend/migrations_dump.txt
      - run: 
          name: Look at error log file
          command: cat /home/circleci/.npm/_logs/2022-08-31T*-debug.log
          when: on_fail
     # Here's where you will add some code to rollback on failure 
      - destroy-environment    

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum update
            yum install -y tar gzip python3 python3-pip 
            python3 -m pip install --user ansible 
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
            cat frontend/.env
      - restore_cache:
          keys: [frontend-dist]
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz /home/circleci/project/frontend/dist
            aws s3 cp /home/circleci/project/frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
  
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["11:f7:81:0b:69:ed:27:19:27:f7:47:6d:f2:21:7f:5e"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            # python3 -m pip install --user pip
            # python -m pip install --user Cmake
            # python3 -m pip install --user ansible
            apk add --update tar gzip  
            apk add --update ansible  
            apk add --update nodejs npm
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -----"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # Uncomment before submission, helps the jobs run faster
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      #- scan-backend:
      #    requires: [build-backend]
      - deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          requires: [build-frontend, build-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      #- run-migrations:
      #    requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [build-frontend]
          #requires: [run-migrations]
      - deploy-backend:
          requires: [build-backend]
          #requires: [run-migrations]